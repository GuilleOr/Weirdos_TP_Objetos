import luisAlberto.*
import fender.*
import gibson.*
import Cancion.*
import Presentacion.*
import lunaPark.*
import laTrastienda.*
import pimpinela.*
import DeGrupo.*
import VocalistaPopular.*
import Grupo.*
import restricciones.*
import Condiciones.*
import Album.*

describe "tests para las presentaciones" {
	var joaquin = new DeGrupo(20, [ ], 5)
	var lucia = new VocalistaPopular(70, [ ], "familia")
	var soledad = new VocalistaPopular(55, [ ], "amor")
	var presentacionLuna = new Presentacion()
	var presentacionLaTrastienda = new Presentacion()
	var presentacionLuna2 = new Presentacion()
	var cancionAlicia = new Cancion()

	var justCrisantemo = new Album() 
	var cancionCrisantemo = new Cancion()
	
	var condicionLuna1 = new CondicionDeHabilidad(70)
	var condicionLuna2 = new CondicionDeCompositor(1)
	var condicionLuna3 = new CondicionDeCancionBienInterpretada(cancionAlicia)
	fixture {
		lucia.habilidadNueva(90)
		soledad.habilidadNueva(80)
		
		luisAlberto.guitarra(fender)
		luisAlberto.agregarAlbum(justCrisantemo)
	}
	method justCrisantemo() {
		justCrisantemo.titulo("just crisantemo")
		justCrisantemo.fechaLanzamiento(new Date(05, 12, 2007))
		justCrisantemo.vendidos(27500)
		justCrisantemo.salieron(28000)
		justCrisantemo.agregarCancion(cancionCrisantemo)
		justCrisantemo.agregarCancion(cancionAlicia)
		return justCrisantemo
	}
	method cancionCrisantemo() {
		cancionCrisantemo.autor(luisAlberto)
		cancionCrisantemo.nombre("crisantemo")
		cancionCrisantemo.duracion(175)
		cancionCrisantemo.letra("Tocame junto a esta pared, yo quede por aqui... cuando no hubo mas luz... quiero mirar a traves de mi piel... Crisantemo, que se abrio... encuentra el camino hacia el cielo")
		return cancionCrisantemo
	}
	method cancionAlicia() {
		cancionAlicia.autor(luisAlberto)
		cancionAlicia.nombre("Alicia en el pais de las maravillas")
		cancionAlicia.duracion(510)
		cancionAlicia.letra("Quien sabe Alicia.")
		return cancionAlicia
	}

	method presentacionLunaPark() {
		presentacionLuna.lugar(lunaPark)
		presentacionLuna.sumarArtista(joaquin)
		presentacionLuna.sumarArtista(lucia)
		presentacionLuna.sumarArtista(luisAlberto)
		presentacionLuna.fecha(new Date(20, 04, 2017))
		return presentacionLuna
	}

	method presentacionLaTrastienda() {
		presentacionLaTrastienda.lugar(laTrastienda)
		presentacionLaTrastienda.sumarArtista(joaquin)
		presentacionLaTrastienda.sumarArtista(lucia)
		presentacionLaTrastienda.sumarArtista(luisAlberto)
		presentacionLaTrastienda.fecha(new Date(15, 11, 2017))
		return presentacionLaTrastienda
	}

	method presentacionLunaPark2() {
		presentacionLuna2.lugar(lunaPark)
		presentacionLuna2.fecha(new Date(15, 12, 2017))
		presentacionLuna2.condicionesParaParticipar([
		condicionLuna1, condicionLuna2, condicionLuna3 ])
	}

	test "Joaquin cobra 50 por presentarse en el luna park" {

		self.presentacionLunaPark()

		assert.equals(50, joaquin.costo(presentacionLuna))
	}

	test "Joaquin cobra 100 por presentarse solo en la trastienda" {

		self.presentacionLaTrastienda()
		presentacionLaTrastienda.eliminarArtista(luisAlberto)
		presentacionLaTrastienda.eliminarArtista(lucia)

		assert.equals(100, joaquin.costo(presentacionLaTrastienda))
	}

	test "La capacidad de la trastienda para el 5 de agosto de 2017 es 700" {

		var fechaShow = new Date(05, 08, 2017)
		assert.equals(700, laTrastienda.capacidad(fechaShow))
	}

	test "La capacidad de la trastienda para el 8 de agosto de 2017 es 400" {

		var fechaShow = new Date(08, 08, 2017)
		assert.equals(400, laTrastienda.capacidad(fechaShow))
	}

	test "Lucia cobra 500 por presentarse en el luna park " {
		self.presentacionLunaPark()
		assert.equals(500, lucia.costo(presentacionLuna))
	}

	test "Lucia cobra 400 por presentarse en la trastienda" {
		self.presentacionLaTrastienda()
		assert.equals(400, lucia.costo(presentacionLaTrastienda))
	}

	test "luis alberto cobra 1000 por presentarse en el luna park" {
		self.presentacionLunaPark()
		assert.equals(1000, luisAlberto.costo(presentacionLuna))
	}

	test "luis alberto cobra 1200 por presentarse en la trastienda" {
		self.presentacionLaTrastienda()
		assert.equals(1200, luisAlberto.costo(presentacionLaTrastienda))
	}

	test "el costo de la presentacion del luna park es 1550" {
		self.presentacionLunaPark()
		assert.equals(1550, presentacionLuna.costo())
	}

	test "el costo de la presentacion de la trastienda es 1650" {
		self.presentacionLaTrastienda()
		assert.equals(1650, presentacionLaTrastienda.costo())
	}

	test "joaquin no puede participar de pdepalooza" {
		self.presentacionLunaPark2()
		assert.throwsException({ presentacionLuna2.sumarArtistaCondiciones(joaquin)
		})
	}

	test "luisAlberto puede participar en presentacionLuna2" {
		self.cancionCrisantemo()
		self.justCrisantemo()
		self.presentacionLunaPark2()
		self.cancionAlicia()

		assert.throwsException({
		presentacionLuna2.sumarArtistaCondiciones(luisAlberto) })

		//assert.throwsExceptionWithMessage("El musico no cumple la condicion impuesta", {presentacionLuna2.sumarArtistaCondiciones(luisAlberto)})


	}
	
	test "es de su autoria"{
		self.cancionAlicia()
		self.justCrisantemo()
		assert.that(luisAlberto.interpretaBien(cancionAlicia))
	}

}


